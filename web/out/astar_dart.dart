// Auto-generated from astar_dart.html.
// DO NOT EDIT.

library astar_dart_html;

import 'dart:html' as autogenerated;
import 'dart:svg' as autogenerated_svg;
import 'package:web_ui/web_ui.dart' as autogenerated;
import 'package:web_ui/observe/observable.dart' as __observe;
import 'dart:core';
import 'dart:html';
import 'package:web_ui/web_ui.dart';
import '../astarmap.dart';
import '../astarnode.dart';


// Original code


final __changes = new __observe.Observable();

String __$mapWidth = '64';
String get mapWidth {
  if (__observe.observeReads) {
    __observe.notifyRead(__changes, __observe.ChangeRecord.FIELD, 'mapWidth');
  }
  return __$mapWidth;
}
set mapWidth(String value) {
  if (__observe.hasObservers(__changes)) {
    __observe.notifyChange(__changes, __observe.ChangeRecord.FIELD, 'mapWidth',
        __$mapWidth, value);
  }
  __$mapWidth = value;
}
String __$mapHeight = '48';
String get mapHeight {
  if (__observe.observeReads) {
    __observe.notifyRead(__changes, __observe.ChangeRecord.FIELD, 'mapHeight');
  }
  return __$mapHeight;
}
set mapHeight(String value) {
  if (__observe.hasObservers(__changes)) {
    __observe.notifyChange(__changes, __observe.ChangeRecord.FIELD, 'mapHeight',
        __$mapHeight, value);
  }
  __$mapHeight = value;
}
String __$mapScale = '10';
String get mapScale {
  if (__observe.observeReads) {
    __observe.notifyRead(__changes, __observe.ChangeRecord.FIELD, 'mapScale');
  }
  return __$mapScale;
}
set mapScale(String value) {
  if (__observe.hasObservers(__changes)) {
    __observe.notifyChange(__changes, __observe.ChangeRecord.FIELD, 'mapScale',
        __$mapScale, value);
  }
  __$mapScale = value;
}

CanvasElement canvas;
CanvasRenderingContext2D context;
AstarMap map;
AstarNode start;
AstarNode goal;

bool isMouseDown = false;

void main() {
  canvas = query('#astar');
  resizeCanvas();
  
  context = canvas.getContext('2d') as CanvasRenderingContext2D;
  map = new AstarMap(context,  int.parse(mapWidth), int.parse(mapHeight), int.parse(mapScale));
  start = new AstarNode(0, 0);
  goal = new AstarNode(map.width - 1, map.height - 1);
  
  registerEvents(canvas);
}

void registerEvents(CanvasElement canvas) {
  canvas.onMouseDown.listen(canvasMouseDown);
  canvas.onMouseUp.listen(canvasMouseUp);
  canvas.onMouseMove.listen(canvasMouseMove);
  canvas.onContextMenu.listen((MouseEvent e) => e.preventDefault());
  query('#run').onClick.listen((e) => run());
  query('#clear').onClick.listen(clearMap);
}

int get canvasWidth  => int.parse(mapScale) * int.parse(mapWidth);
int get canvasHeight => int.parse(mapScale) * int.parse(mapHeight);

void resizeCanvas() {
  canvas
    ..width = canvasWidth
    ..height = canvasHeight;
}

void resizeMap() {
  map.resize(int.parse(mapWidth), int.parse(mapHeight), int.parse(mapScale));
  goal = new AstarNode(map.width - 1, map.height - 1);
}

void clearMap(MouseEvent e) {
  resizeCanvas();
  resizeMap();
  map.clear();
}

void run() {
  resizeCanvas();
  resizeMap();
  map.clearPath();
  map.astar(start, goal);
}

void canvasMouseDown(MouseEvent e) {
  isMouseDown = true;
  map.placeObstacles(e);
}

void canvasMouseUp(MouseEvent e) {
  isMouseDown = false;
}

void canvasMouseMove(MouseEvent e) {
  if (isMouseDown)
    map.placeObstacles(e);
}
// Additional generated code
void init_autogenerated() {
  var __root = autogenerated.document.body;
  var __e0, __e1, __e2, __e4;
  var __t = new autogenerated.Template(__root);
  __e0 = __root.nodes[3].nodes[1];
  __t.listen(__e0.onChange, ($event) { resizeMap(); });
  __t.listen(__e0.onInput, ($event) { mapWidth = __e0.value; });
  __t.oneWayBind(() => mapWidth, (e) { if (__e0.value != e) __e0.value = e; }, false, false);
  __e1 = __root.nodes[5].nodes[1];
  __t.listen(__e1.onChange, ($event) { resizeMap(); });
  __t.listen(__e1.onInput, ($event) { mapHeight = __e1.value; });
  __t.oneWayBind(() => mapHeight, (e) { if (__e1.value != e) __e1.value = e; }, false, false);
  __e2 = __root.nodes[7].nodes[1];
  __t.listen(__e2.onInput, ($event) { mapScale = __e2.value; });
  __t.oneWayBind(() => mapScale, (e) { if (__e2.value != e) __e2.value = e; }, false, false);
  __e4 = __root.nodes[7].nodes[3];
  var __binding3 = __t.contentBind(() => mapScale, false);
  __e4.nodes.add(__binding3);
  __t.create();
  __t.insert();
}

//@ sourceMappingURL=astar_dart.dart.map